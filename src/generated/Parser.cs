/*----------------------------------------------------------------------
Compiler Generator Coco/R,
Copyright (c) 1990, 2004 Hanspeter Moessenboeck, University of Linz
extended by M. Loeberbauer & A. Woess, Univ. of Linz
with improvements by Pat Terry, Rhodes University

This program is free software; you can redistribute it and/or modify it 
under the terms of the GNU General Public License as published by the 
Free Software Foundation; either version 2, or (at your option) any 
later version.

This program is distributed in the hope that it will be useful, but 
WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License 
for more details.

You should have received a copy of the GNU General Public License along 
with this program; if not, write to the Free Software Foundation, Inc., 
59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

As an exception, it is allowed to write an extension of Coco/R that is
used as a plugin in non-free software.

If not otherwise stated, any source code generated by Coco/R (other than 
Coco/R itself) does not fall under the GNU General Public License.
-----------------------------------------------------------------------*/

using System;

namespace Tastier {



public class Parser {
	public const int _EOF = 0;
	public const int _number = 1;
	public const int _ident = 2;
	public const int _string = 3;
	public const int maxT = 44;

	const bool T = true;
	const bool x = false;
	const int minErrDist = 2;
	
	public Scanner scanner;
	public Errors  errors;

	public Token t;    // last recognized token
	public Token la;   // lookahead token
	int errDist = minErrDist;

const int // object kinds
      var = 0, proc = 1, constant = 2, scope = 3, array = 4;

   const int // types
      undef = 0, integer = 1, boolean = 2;

   public SymbolTable tab;
   public CodeGenerator gen;
  
/*-------------------------------------------------------------------------------------------*/



	public Parser(Scanner scanner) {
		this.scanner = scanner;
		errors = new Errors();
	}

	void SynErr (int n) {
		if (errDist >= minErrDist) errors.SynErr(la.line, la.col, n);
		errDist = 0;
	}

	public void SemErr (string msg) {
		if (errDist >= minErrDist) errors.SemErr(t.line, t.col, msg);
		errDist = 0;
	}
	
	void Get () {
		for (;;) {
			t = la;
			la = scanner.Scan();
			if (la.kind <= maxT) { ++errDist; break; }

			la = t;
		}
	}
	
	void Expect (int n) {
		if (la.kind==n) Get(); else { SynErr(n); }
	}
	
	bool StartOf (int s) {
		return set[s, la.kind];
	}
	
	void ExpectWeak (int n, int follow) {
		if (la.kind == n) Get();
		else {
			SynErr(n);
			while (!StartOf(follow)) Get();
		}
	}


	bool WeakSeparator(int n, int syFol, int repFol) {
		int kind = la.kind;
		if (kind == n) {Get(); return true;}
		else if (StartOf(repFol)) {return false;}
		else {
			SynErr(n);
			while (!(set[syFol, kind] || set[repFol, kind] || set[0, kind])) {
				Get();
				kind = la.kind;
			}
			return StartOf(syFol);
		}
	}

	
	void AddOp(out Op op) {
		op = Op.ADD; 
		if (la.kind == 4) {
			Get();
		} else if (la.kind == 5) {
			Get();
			op = Op.SUB; 
		} else SynErr(45);
	}

	void Expr(out int reg,        // load value of Expr into register
out int type) {
		int typeR, regR; Op op; 
		SimExpr(out reg,
out type);
		if (StartOf(1)) {
			RelOp(out op);
			SimExpr(out regR,
out typeR);
			if (type == typeR) {
			  type = boolean;
			  gen.RelOp(op, reg, regR);
			}
			else SemErr("incompatible types");
			
		}
		gen.ClearRegisters(); 
	}

	void SimExpr(out int reg,     //load value of SimExpr into register
out int type) {
		int typeR, regR; Op op; 
		Term(out reg,
out type);
		while (la.kind == 4 || la.kind == 5) {
			AddOp(out op);
			Term(out regR,
out typeR);
			if (type == integer && typeR == integer)
			  gen.AddOp(op, reg, regR);
			else SemErr("integer type expected");
			
		}
	}

	void RelOp(out Op op) {
		op = Op.EQU; 
		switch (la.kind) {
		case 19: {
			Get();
			break;
		}
		case 20: {
			Get();
			op = Op.LSS; 
			break;
		}
		case 21: {
			Get();
			op = Op.GTR; 
			break;
		}
		case 22: {
			Get();
			op = Op.NEQ; 
			break;
		}
		case 23: {
			Get();
			op = Op.LEQ; 
			break;
		}
		case 24: {
			Get();
			op = Op.GEQ; 
			break;
		}
		default: SynErr(46); break;
		}
	}

	void Primary(out int reg,     // load Primary into register
out int type) {
		int n; Obj obj; string name; 
		type = undef;
		reg = gen.GetRegister();
		
		switch (la.kind) {
		case 2: {
			Ident(out name);
			obj = tab.Find(name); type = obj.type;
			if (obj.kind == var || obj.kind == constant) {
			  	if (obj.level == 0){
			     	gen.LoadGlobal(reg, obj.adr, name);
			     	if(obj.isParam==1){
			     		gen.MoveRegister(2,reg);
			     		gen.LoadLocalValue(reg,name);
			 	 	}
			 	}
			  	else{
			   	gen.LoadLocal(reg, tab.curLevel-obj.level, obj.adr, name);
			     	if(obj.isParam==1){
			     		gen.MoveRegister(2,reg);
			     		gen.LoadLocalValue(reg,name);
			 	 	}
			 	}
			  	if (type == boolean){
			  		// reset Z flag in CPSR
			   	gen.ResetZ(reg);
			   }
			}
			else SemErr("variable or constant expected");
			
			break;
		}
		case 1: {
			Get();
			type = integer;
			n = Convert.ToInt32(t.val);
			gen.LoadConstant(reg, n);
			
			break;
		}
		case 5: {
			Get();
			Primary(out reg,
out type);
			if (type == integer)
			  gen.NegateValue(reg);
			else SemErr("integer type expected");
			
			break;
		}
		case 6: {
			Get();
			type = boolean;
			gen.LoadTrue(reg);
			
			break;
		}
		case 7: {
			Get();
			type = boolean;
			gen.LoadFalse(reg);
			
			break;
		}
		case 8: {
			Get();
			Expr(out reg,
out type);
			Expect(9);
			break;
		}
		default: SynErr(47); break;
		}
	}

	void Ident(out string name) {
		Expect(2);
		name = t.val; 
	}

	void String(out string text) {
		Expect(3);
		text = t.val; 
	}

	void MulOp(out Op op) {
		op = Op.MUL; 
		if (la.kind == 10) {
			Get();
		} else if (la.kind == 11 || la.kind == 12) {
			if (la.kind == 11) {
				Get();
			} else {
				Get();
			}
			op = Op.DIV; 
		} else if (la.kind == 13 || la.kind == 14) {
			if (la.kind == 13) {
				Get();
			} else {
				Get();
			}
			op = Op.MOD; 
		} else SynErr(48);
	}

	void ProcDecl(string progName) {
		Obj obj, currParam, temp; string procName; string name; int type; 
		Expect(15);
		Ident(out procName);
		obj = tab.NewObj(procName, proc, undef);
		if (procName == "main")
		  if (tab.curLevel == 0)
		     tab.mainPresent = true;
		  else SemErr("main not at lexic level 0");
		tab.OpenScope();
		
		Expect(8);
		if (la.kind == 9) {
			Get();
		} else if (la.kind == 41 || la.kind == 42) {
			Type(out type);
			Ident(out name);
			currParam = tab.NewObj(name,var,type);
			currParam.isParam = 1;
			obj.next = currParam;
			obj.paramCount++;
			
			while (la.kind == 16) {
				Get();
				Type(out type);
				Ident(out name);
				temp = tab.NewObj(name,var,type);
				currParam.next = temp;
				currParam = temp;
				currParam.isParam = 1;
				obj.paramCount++;
				
			}
			Expect(9);
		} else SynErr(49);
		Expect(17);
		while (la.kind == 41 || la.kind == 42 || la.kind == 43) {
			if (la.kind == 41 || la.kind == 42) {
				VarDecl();
			} else {
				ConstDef();
			}
		}
		while (la.kind == 15) {
			ProcDecl(progName);
		}
		if (procName == "main")
		  gen.Label("Main", "Body");
		else {
		  gen.ProcNameComment(procName);
		  gen.Label(procName, "Body");
		}
		
		Stat();
		while (StartOf(2)) {
			Stat();
		}
		Expect(18);
		if (procName == "main") {
		  gen.StopProgram(progName);
		  gen.Enter("Main", tab.curLevel, tab.topScope.nextAdr);
		} else {
		  gen.Return(procName);
		  gen.Enter(procName, tab.curLevel, tab.topScope.nextAdr);
		}
		obj.outer = tab.topScope;
		tab.CloseScope();
		
	}

	void Type(out int type) {
		type = undef; 
		if (la.kind == 41) {
			Get();
			type = integer; 
		} else if (la.kind == 42) {
			Get();
			type = boolean; 
		} else SynErr(50);
	}

	void VarDecl() {
		string name; int type; int length; 
		Type(out type);
		Ident(out name);
		if (la.kind == 16 || la.kind == 28) {
			tab.NewObj(name, var, type); 
			while (la.kind == 16) {
				Get();
				Ident(out name);
				tab.NewObj(name, var, type); 
			}
			Expect(28);
		} else if (la.kind == 26) {
			Get();
			Expect(1);
			length = Convert.ToInt32(t.val); 
			Expect(27);
			Expect(28);
			tab.NewArray(name, type, length); 
		} else SynErr(51);
	}

	void ConstDef() {
		int type; string name; Obj obj; int reg; int pReg = gen.GetRegister(); 
		Expect(43);
		Ident(out name);
		Expect(25);
		Expr(out reg, out type);
		obj = tab.NewObj(name, constant, type); 
		if (obj.level == 0){
		  	if(obj.isParam==1){
			gen.LoadLocal(pReg, tab.curLevel-obj.level, obj.adr, name);
			gen.MoveRegister(2,pReg);
		    	gen.StoreLocalValue(reg,name);
			}
			else{
				gen.StoreGlobal(reg, obj.adr, name);
			}
		}
		else{
			if(obj.isParam==1){
			gen.LoadLocal(pReg, tab.curLevel-obj.level, obj.adr, name);
			gen.MoveRegister(2,pReg);
		    	gen.StoreLocalValue(reg,name);
			}
			else{
				gen.StoreLocal(reg, tab.curLevel-obj.level, obj.adr, name);
			}
		}
		gen.ClearRegisters();
		
		Expect(28);
	}

	void Stat() {
		int type; string name; Obj obj; int reg=gen.GetRegister(); int pReg= gen.GetRegister(); int i=0; 
		switch (la.kind) {
		case 2: {
			Ident(out name);
			obj = tab.Find(name); 
			if (la.kind == 25 || la.kind == 26) {
				if (la.kind == 25) {
					Get();
				} else {
					Get();
					Expect(1);
					Expect(27);
					i = Convert.ToInt32(t.val);  
					Expect(25);
				}
				int l1, l2; l1 = 0; l2 = 0; 
				if (obj.kind == proc)
				 SemErr("cannot assign to procedure");
				if (obj.kind == constant)
				 SemErr("cannot re-assign to a constant");
				
				Expr(out reg,
out type);
				if (la.kind == 28) {
					Get();
					if (type == obj.type){
					  if (obj.kind == array){
					     if (obj.level == 0){
					    	if(obj.isParam==1){
					   			gen.LoadLocal(pReg, tab.curLevel-obj.level, obj.adr+i, name);
					   			gen.MoveRegister(2,pReg);
					         	gen.StoreLocalValue(reg,name);
						 	}
						 	else{
					        		gen.StoreGlobal(reg, obj.adr+i, name);
						 	}
					     }
					     else{
					    	if(obj.isParam==1){
					   			gen.LoadLocal(pReg, tab.curLevel-obj.level, obj.adr+i, name);
					   			gen.MoveRegister(2,pReg);
					         	gen.StoreLocalValue(reg,name);
						 	}
						 	else{
					     		gen.StoreLocal(reg, tab.curLevel-obj.level, obj.adr+i, name);
					     	}
					     }
					  }
					  else{
					     if (obj.level == 0){
					    	if(obj.isParam==1){
					   			gen.LoadLocal(pReg, tab.curLevel-obj.level, obj.adr, name);
					   			gen.MoveRegister(2,pReg);
					         	gen.StoreLocalValue(reg,name);
						 	}
						 	else{
					         	gen.StoreGlobal(reg, obj.adr, name);
						 	}
					     }
					     else{
					    	if(obj.isParam==1){
					   			gen.LoadLocal(pReg, tab.curLevel-obj.level, obj.adr, name);
					   			gen.MoveRegister(2,pReg);
					         	gen.StoreLocalValue(reg,name);
						 	}
						 	else{
					     		gen.StoreLocal(reg, tab.curLevel-obj.level, obj.adr, name);
					     	}
					     }
					 }
					}
					else{
					SemErr("Error: trying to assign value of type "+type+" to "+obj.name+" which is of type"+obj.type+".");
					}
					
				} else if (la.kind == 29) {
					Get();
					if (type!=boolean){
					   SemErr("boolean expected");
					}
					l1 = gen.NewLabel();
					gen.BranchFalse(l1);
					
					Expr(out reg,
out type);
					Expect(30);
					if (type == obj.type){
					   if (obj.kind == array){
					       if (obj.level == 0){
					      	if(obj.isParam==1){
					     			gen.LoadLocal(pReg, tab.curLevel-obj.level, obj.adr+i, name);
					     			gen.MoveRegister(2,pReg);
					           	gen.StoreLocalValue(reg,name);
					  	 	}
					  	 	else{
					          		gen.StoreGlobal(reg, obj.adr+i, name);
					  	 	}
					  	}
					       else{
					      	if(obj.isParam==1){
					     			gen.LoadLocal(pReg, tab.curLevel-obj.level, obj.adr+i, name);
					     			gen.MoveRegister(2,pReg);
					           	gen.StoreLocalValue(reg,name);
					  	 	}
					  	 	else{
					       		gen.StoreLocal(reg, tab.curLevel-obj.level, obj.adr+i, name);
					       	}
					       }
					   }
					   else{
					       if (obj.level == 0){
					      	if(obj.isParam==1){
					     			gen.LoadLocal(pReg, tab.curLevel-obj.level, obj.adr, name);
					     			gen.MoveRegister(2,pReg);
					           	gen.StoreLocalValue(reg,name);
					  	 	}
					  	 	else{
					           	gen.StoreGlobal(reg, obj.adr, name);
					  	 	}
					       }
					       else{
					      	if(obj.isParam==1){
					      		SemErr("yeah babe");
					     			gen.LoadLocal(pReg, tab.curLevel-obj.level, obj.adr, name);
					     			gen.MoveRegister(2,pReg);
					           	gen.StoreLocalValue(reg,name);
					  	 	}
					  	 	else{
					       		gen.StoreLocal(reg, tab.curLevel-obj.level, obj.adr, name);
					       	}
					       }
					   }
					}
					l2 = gen.NewLabel();
					gen.Branch(l2);
					gen.Label(l1);
					
					Expr(out reg,
out type);
					Expect(28);
					if (type == obj.type){
					   if (obj.kind == array){
					       if (obj.level == 0){
					      	if(obj.isParam==1){
					     			gen.LoadLocal(pReg, tab.curLevel-obj.level, obj.adr+i, name);
					     			gen.MoveRegister(2,pReg);
					           	gen.StoreLocalValue(reg,name);
					  	 	}
					  	 	else{
					          		gen.StoreGlobal(reg, obj.adr+i, name);
					  	 	}
					       }
					       else{
					      	if(obj.isParam==1){
					     			gen.LoadLocal(pReg, tab.curLevel-obj.level, obj.adr+i, name);
					     			gen.MoveRegister(2,pReg);
					           	gen.StoreLocalValue(reg,name);
					  	 	}
					  	 	else{
					       		gen.StoreLocal(reg, tab.curLevel-obj.level, obj.adr+i, name);
					       	}
					       }
					   }
					   else{
					       if (obj.level == 0){
					      	if(obj.isParam==1){
					     			gen.LoadLocal(pReg, tab.curLevel-obj.level, obj.adr, name);
					     			gen.MoveRegister(2,pReg);
					           	gen.StoreLocalValue(reg,name);
					  	 	}
					  	 	else{
					       		gen.StoreGlobal(reg, obj.adr, name);
					       	}
					       }
					       else{
					      	if(obj.isParam==1){
					     			gen.LoadLocal(pReg, tab.curLevel-obj.level, obj.adr, name);
					     			gen.MoveRegister(2,pReg);
					           	gen.StoreLocalValue(reg,name);
					  	 	}
					  	 	else{
					       		gen.StoreLocal(reg, tab.curLevel-obj.level, obj.adr, name);
					       	}
					       }
					   }
					}
					
					gen.Label(l2); 
				} else SynErr(52);
			} else if (la.kind == 8) {
				Get();
				Obj process = tab.Find(name); string argName; Obj currParam = process.next; int argCount = 0; Obj currArg; int offset; 
				if (la.kind == 9) {
					Get();
					Expect(28);
					if(process.paramCount!=0){
					SemErr(argCount+" arguments passed to "+process.name+", which has "+process.paramCount+" parameters.");
					}
					
					
				} else if (la.kind == 2) {
					Ident(out argName);
					reg = gen.GetRegister();
					offset = gen.GetRegister();
					currArg = tab.Find(argName);
					if(currParam!=null && currParam.level==process.level+1){
					if(currArg.type!=currParam.type){
						SemErr("Error: argument "+argCount+" of "+process.name+" is of type "+currArg.type+" instead of type "+currParam.type+".");
					}
					//Push address of this argument onto the stack.
					
					                         //Load the address of the argument into reg
					if(currArg.level==0){
					                         	gen.LoadGlobalAddress(currArg.adr);	
					
					                         	gen.AddOp(Op.ADD,2,2);	// Multiply result by 4 (double twice)
					                         	gen.AddOp(Op.ADD,2,2);
					
					                         	gen.AddOp(Op.ADD,2,4);	// Add result to address of Global variables.
					                     	}
					                     	else{
					                         	gen.LoadLocalAddress(tab.curLevel-currArg.level, currArg.adr);
					                     	}
					                         gen.MoveRegister(reg,2);
					gen.MoveRegister(2,11);															//Put TOP into R2
					gen.LoadConstant(offset,4+argCount);
					                         gen.StoreIndexedGlobalValue(reg,offset,currArg.name);							//Store reg into TOP + (4 + argCount) x 4
					                      argCount++;
					}
					currParam = currParam.next;
					
					
					while (la.kind == 16) {
						Get();
						Ident(out argName);
						currArg = tab.Find(argName);
						if(currParam!=null && currParam.level==process.level+1){
						if(currArg.type!=currParam.type){
							SemErr("Error: argument "+argCount+" of "+process.name+" is of type "+currArg.type+" instead of type "+currParam.type+". ");
						}
						//Push address of this argument onto the stack.
						
						//Load the address of the argument into reg
						if(currArg.level==0){
						                         	gen.LoadGlobalAddress(currArg.adr);	
						
						                         	gen.AddOp(Op.ADD,2,2);	// Multiply result by 4 (double twice)
						                         	gen.AddOp(Op.ADD,2,2);
						
						                         	gen.AddOp(Op.ADD,2,4);	// Add result to address of Global variables.
						                     	}
						                     	else{
						                         	gen.LoadLocalAddress(tab.curLevel-currArg.level, currArg.adr);
						                     	}
						                         gen.MoveRegister(reg,2);
						gen.MoveRegister(2,11);												//Put TOP into R2
						gen.LoadConstant(offset,4+argCount);
						                         gen.StoreIndexedLocalValue(reg,offset,currArg.name);				//Store reg into TOP + (4 + argCount) x 4
						                      argCount++;
						}
						currParam = currParam.next;
						
					}
					Expect(9);
					if(argCount!=process.paramCount){
					SemErr(argCount+" arguments passed to "+process.name+", which has "+process.paramCount+" parameters.");
					}
					
					Expect(28);
					if (obj.kind == proc){
					 	gen.Call(name);
					}
					else{
						SemErr("object is not a procedure");
					}
					gen.ClearRegisters();
					
				} else SynErr(53);
			} else SynErr(54);
			break;
		}
		case 31: {
			Get();
			int l1, l2; l1 = 0; 
			Expr(out reg,
out type);
			if (type == boolean) {
			  l1 = gen.NewLabel();
			  gen.BranchFalse(l1);
			}
			else SemErr("boolean type expected");
			
			Stat();
			l2 = gen.NewLabel();
			gen.Branch(l2);
			gen.Label(l1);
			
			if (la.kind == 32) {
				Get();
				Stat();
			}
			gen.Label(l2); 
			break;
		}
		case 33: {
			Get();
			int l1, l2;
			l1 = gen.NewLabel();
			gen.Label(l1); l2=0;
			
			Expr(out reg,
out type);
			if (type == boolean) {
			  l2 = gen.NewLabel();
			  gen.BranchFalse(l2);
			}
			else SemErr("boolean type expected");
			
			Stat();
			gen.Branch(l1);
			gen.Label(l2);
			
			break;
		}
		case 34: {
			Get();
			int l1, l2, l3, l4; 
			Expect(8);
			Stat();
			l1 = gen.NewLabel(); 
			   	l2 = gen.NewLabel();
			   	l3 = gen.NewLabel();
			   	l4 = gen.NewLabel();
			gen.Label(l1);
			
			Expr(out reg,out type);
			if (type == boolean) {
			  gen.BranchFalse(l4);
			  gen.BranchTrue(l2);
			}
			else{
			SemErr("boolean type expected");
			}
			
			Expect(28);
			gen.Label(l3); 
			Stat();
			gen.Branch(l1); 
			Expect(9);
			Expect(17);
			gen.Label(l2); 
			Stat();
			gen.Branch(l3);
			gen.Label(l4);
			
			Expect(18);
			break;
		}
		case 35: {
			Get();
			int reg2, type2; int l1, l2, l3;
			Expect(8);
			Expr(out reg,out type);
			Expect(9);
			l1 = gen.NewLabel(); l3 = gen.NewLabel();
			Expect(17);
			Expect(36);
			Expr(out reg2,out type2);
			if(type!=type2){ 
			gen.Branch(l1); 
			} 
			else{
			gen.RelOp(Op.EQU,reg2,reg);
			gen.BranchFalse(l1);
			}
			
			Expect(30);
			Stat();
			gen.Branch(l3);  gen.Label(l1); 
			while (la.kind == 36) {
				Get();
				Expr(out reg2,out type2);
				l2 = gen.NewLabel(); 
				if(type!=type2){ 
				gen.Branch(l2); 
				} 
				else{
				gen.RelOp(Op.EQU,reg2,reg);
				gen.BranchFalse(l2);
				}
				
				Expect(30);
				Stat();
				gen.Branch(l3); gen.Label(l2); 
			}
			Expect(18);
			gen.Label(l3); 
			break;
		}
		case 37: {
			Get();
			Ident(out name);
			Expect(28);
			int temp = gen.GetRegister();
			obj = tab.Find(name);
			if (obj.type == integer) {
			  	gen.ReadInteger(); 
			  	if (obj.level == 0){
			     	if(obj.isParam==1){
			 			gen.LoadLocal(temp, tab.curLevel-obj.level, obj.adr, name);
			 			gen.MoveRegister(2,temp);
			       	gen.StoreLocalValue(0,name);
			 	 	}
			 	 	else{
			   		gen.StoreGlobal(0, obj.adr, name);
			   	}
			  	}
			  	else{
			     	if(obj.isParam==1){
			 			gen.LoadLocal(temp, tab.curLevel-obj.level, obj.adr, name);
			 			gen.MoveRegister(2,temp);
			       	gen.StoreLocalValue(0,name);
			 	 	}
			 	 	else{
			   		gen.StoreLocal(0, tab.curLevel-obj.level, obj.adr, name);
			   	}
			  	}
			}
			else{
			SemErr("integer type expected");
			}
			gen.ClearRegisters();
			
			break;
		}
		case 38: {
			Get();
			string text; 
			if (StartOf(3)) {
				Expr(out reg,
out type);
				switch (type) {
				  case integer: gen.WriteInteger(reg, false);
				                break; 
				  case boolean: gen.WriteBoolean(false);
				                break;
				}
				
			} else if (la.kind == 3) {
				String(out text);
				gen.WriteString(text); 
			} else SynErr(55);
			Expect(28);
			break;
		}
		case 39: {
			Get();
			Expr(out reg,
out type);
			switch (type) {
			  case integer: gen.WriteInteger(reg, true);
			                break;
			  case boolean: gen.WriteBoolean(true);
			                break;
			}
			
			Expect(28);
			break;
		}
		case 17: {
			Get();
			tab.OpenSubScope(); 
			while (la.kind == 41 || la.kind == 42 || la.kind == 43) {
				if (la.kind == 41 || la.kind == 42) {
					VarDecl();
				} else {
					ConstDef();
				}
			}
			Stat();
			while (StartOf(2)) {
				Stat();
			}
			Expect(18);
			tab.CloseSubScope(); 
			break;
		}
		default: SynErr(56); break;
		}
	}

	void Term(out int reg,        // load value of Term into register
out int type) {
		int typeR, regR; Op op; 
		Primary(out reg,
out type);
		while (StartOf(4)) {
			MulOp(out op);
			Primary(out regR,
out typeR);
			if (type == integer && typeR == integer)
			  gen.MulOp(op, reg, regR);
			else SemErr("integer type expected");
			
		}
	}

	void Tastier() {
		string progName; 
		Expect(40);
		Ident(out progName);
		tab.OpenScope(); 
		Expect(17);
		while (la.kind == 41 || la.kind == 42 || la.kind == 43) {
			if (la.kind == 41 || la.kind == 42) {
				VarDecl();
			} else {
				ConstDef();
			}
		}
		while (la.kind == 15) {
			ProcDecl(progName);
		}
		tab.CloseScope(); 
		Expect(18);
	}



	public void Parse() {
		la = new Token();
		la.val = "";		
		Get();
		Tastier();
		Expect(0);

	}
	
	static readonly bool[,] set = {
		{T,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x},
		{x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,T, T,T,T,T, T,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x},
		{x,x,T,x, x,x,x,x, x,x,x,x, x,x,x,x, x,T,x,x, x,x,x,x, x,x,x,x, x,x,x,T, x,T,T,T, x,T,T,T, x,x,x,x, x,x},
		{x,T,T,x, x,T,T,T, T,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x},
		{x,x,x,x, x,x,x,x, x,x,T,T, T,T,T,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x}

	};
} // end Parser


public class Errors {
	public int count = 0;                                    // number of errors detected
    public System.IO.TextWriter errorStream = Console.Error; // error messages go to this stream - was Console.Out DMA
    public string errMsgFormat = "-- line {0} col {1}: {2}"; // 0=line, 1=column, 2=text

	public virtual void SynErr (int line, int col, int n) {
		string s;
		switch (n) {
			case 0: s = "EOF expected"; break;
			case 1: s = "number expected"; break;
			case 2: s = "ident expected"; break;
			case 3: s = "string expected"; break;
			case 4: s = "\"+\" expected"; break;
			case 5: s = "\"-\" expected"; break;
			case 6: s = "\"true\" expected"; break;
			case 7: s = "\"false\" expected"; break;
			case 8: s = "\"(\" expected"; break;
			case 9: s = "\")\" expected"; break;
			case 10: s = "\"*\" expected"; break;
			case 11: s = "\"div\" expected"; break;
			case 12: s = "\"DIV\" expected"; break;
			case 13: s = "\"mod\" expected"; break;
			case 14: s = "\"MOD\" expected"; break;
			case 15: s = "\"void\" expected"; break;
			case 16: s = "\",\" expected"; break;
			case 17: s = "\"{\" expected"; break;
			case 18: s = "\"}\" expected"; break;
			case 19: s = "\"=\" expected"; break;
			case 20: s = "\"<\" expected"; break;
			case 21: s = "\">\" expected"; break;
			case 22: s = "\"!=\" expected"; break;
			case 23: s = "\"<=\" expected"; break;
			case 24: s = "\">=\" expected"; break;
			case 25: s = "\":=\" expected"; break;
			case 26: s = "\"[\" expected"; break;
			case 27: s = "\"]\" expected"; break;
			case 28: s = "\";\" expected"; break;
			case 29: s = "\"?\" expected"; break;
			case 30: s = "\":\" expected"; break;
			case 31: s = "\"if\" expected"; break;
			case 32: s = "\"else\" expected"; break;
			case 33: s = "\"while\" expected"; break;
			case 34: s = "\"for\" expected"; break;
			case 35: s = "\"switch\" expected"; break;
			case 36: s = "\"case\" expected"; break;
			case 37: s = "\"read\" expected"; break;
			case 38: s = "\"write\" expected"; break;
			case 39: s = "\"writeln\" expected"; break;
			case 40: s = "\"program\" expected"; break;
			case 41: s = "\"int\" expected"; break;
			case 42: s = "\"bool\" expected"; break;
			case 43: s = "\"const\" expected"; break;
			case 44: s = "??? expected"; break;
			case 45: s = "invalid AddOp"; break;
			case 46: s = "invalid RelOp"; break;
			case 47: s = "invalid Primary"; break;
			case 48: s = "invalid MulOp"; break;
			case 49: s = "invalid ProcDecl"; break;
			case 50: s = "invalid Type"; break;
			case 51: s = "invalid VarDecl"; break;
			case 52: s = "invalid Stat"; break;
			case 53: s = "invalid Stat"; break;
			case 54: s = "invalid Stat"; break;
			case 55: s = "invalid Stat"; break;
			case 56: s = "invalid Stat"; break;

			default: s = "error " + n; break;
		}
		errorStream.WriteLine(errMsgFormat, line, col, s);
		count++;
	}

	public virtual void SemErr (int line, int col, string s) {
		errorStream.WriteLine(errMsgFormat, line, col, s);
		count++;
	}
	
	public virtual void SemErr (string s) {
		errorStream.WriteLine(s);
		count++;
	}
	
	public virtual void Warning (int line, int col, string s) {
		errorStream.WriteLine(errMsgFormat, line, col, s);
	}
	
	public virtual void Warning(string s) {
		errorStream.WriteLine(s);
	}
} // Errors


public class FatalError: Exception {
	public FatalError(string m): base(m) {}
}
}